#!/usr/bin/env python
# -*- coding: utf-8 -*-

import semacs
import argparse
import logging


def main(args):
    a = [vars(args)[i] for i in args.info["args"]]
    if "kwds" in args.info:
        k = {i: vars(args)[i] for i in args.info["kwds"]
             if vars(args)[i] is not None}
    else:
        k = {}
    try:
        semacs.action.execute(args.info, *a, **k)
    except semacs.exception.SemacsError as e:
        if args.debug:
            print(traceback.format_exc())
        print("=*= ERROR =*=")
        print("Message: %s" % e.msg)
        sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    sub_psr = parser.add_subparsers(title="Available Actions", metavar="")
    for name, info in semacs.action.actions.items():
        action_psr = sub_psr.add_parser(name, help=info["doc"])
        for arg in info["args"]:
            action_psr.add_argument(arg)
        if "kwds" not in info:
            continue
        for kwd in info["kwds"]:
            action_psr.add_argument("--" + kwd)
        action_psr.set_defaults(info=info)
    return parser.parse_args()


def init_logger(args):
    logger = logging.getLogger("semacs")
    logger.addHandler(logging.StreamHandler())
    if args.debug:
        logger.setLevel(logging.DEBUG)
    elif args.verbose:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.WARNING)


if __name__ == '__main__':
    args = parse_args()
    init_logger(args)
    main(args)
